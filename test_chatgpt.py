from aiogram import Bot, Dispatcher, types
from config import TOKEN
import logging
import config
from aiogram.utils import executor
from pathlib import Path
import openai
import time
import sys

import os
from googletrans import Translator
from moviepy.editor import concatenate_audioclips, AudioFileClip
from gtts import gTTS
from aiogram.types.message import ContentType
from search_db import *
import os.path
from search_db_profiles import *

logging.basicConfig(level=logging.INFO)
OPENAI_API = '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'
openai.api_key = OPENAI_API
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
LOST_MESSAGE = ''
BUY_STATUS = 0

@dp.message_handler(commands=['agreement'])
async def users_agreement(message: types.Message):
    await message.answer("–í–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∑–∞–ø—Ä–µ—à–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ", parse_mode="HTML")



@dp.message_handler(commands=['profile'])
async def profile_start(message: types.Message):
    money = search_money(message.from_user.id)
    subscription = search_subscription_availability(message.from_user.id)
    if subscription == 0:
        subscription = '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'
    elif subscription == 1:
        subscription = '–ê–∫—Ç–∏–≤–Ω–∞'
    tokens_with_user = search_token(message.from_user.id)
    await message.answer("<b>üìì –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>"
                         "\n \n"
                         f"<b>üë§ –ò–º—è:</b> {message.from_user.first_name} {message.from_user.last_name} \n"
                         f"<b>üîë –¢–æ–∫–µ–Ω–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å:</b> {tokens_with_user}\n"
                         f"<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {money}\n"
                         f"<b>üíé –ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription}\n"
                         "\n"
                         "‚ùì –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ —Ç–æ–∫–µ–Ω—ã /help", parse_mode="HTML")


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b> –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í—Å–µ–º–æ–≥—É—â–∏–π-–ë–æ—Ç. –Ø –º–æ–≥—É"
                         " –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å. –í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–º —Ç–∞–∫ –∏"
                         " –≥–æ–ª–æ—Å–æ–º. –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ. "
                         "–ù–∞–¥–µ—é—Å—å —è –ø–æ–º–æ–≥—É –≤–∞–º! <b>–í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ."
                         " –î–∞–ª–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"
                         " –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É</b>"
                         " –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /buy."
                         "–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—á–∏—Ç–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ", parse_mode="HTML")
    if search_user_with_db(message.from_user.id):
        pass
    elif not search_user_with_db(message.from_user.id):
        add_new_user(message.from_user.id)


# –¥–ª—è –≥–æ–ª–æ—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
@dp.message_handler(content_types=[
    types.ContentType.VOICE,
    types.ContentType.AUDIO,
    types.ContentType.DOCUMENT
]
)
@dp.message_handler()
async def send_message(message: types.Message):
    global LOST_MESSAGE, BUY_STATUS
    if search_token(message.from_user.id) == 0 and search_subscription_availability(message.from_user.id) == 0:
        await message.answer("‚ùó <b>–ö–æ–ª–∏—á–∏—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω–æ</b>, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
                             " –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ <b>–ø—Ä–µ–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É</b> ‚ùó", parse_mode="HTML")
    # if not serch_user(message.from_user.id):
    #     await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É")
    elif int(search_token(message.from_user.id)) > 0 or search_subscription_availability(message.from_user.id) == 1:
        if message.content_type == types.ContentType.VOICE:
            file_id = message.voice.file_id
        elif message.content_type == types.ContentType.AUDIO:
            file_id = message.audio.file_id
        elif message.content_type == types.ContentType.DOCUMENT:
            file_id = message.document.file_id
        else:
            if message.text.lower() == '–ø—Ä–æ–¥–æ–ª–∂–∏':
                response = openai.Completion.create(
                    model='text-davinci-003', prompt='–ü—Ä–æ–¥–æ–ª–∂–∏' + ' ' + LOST_MESSAGE,
                    temperature=0.2, max_tokens=1000, top_p=1.0,
                    frequency_penalty=0.0,
                    presence_penalty=0.6,
                    stop=['You:']
                )
                await message.answer(response['choices'][0]['text'])
                return
            else:
                try:
                    response = openai.Completion.create(
                        model='text-davinci-003', prompt=message.text, temperature=0.2, max_tokens=4000, top_p=1.0,
                        frequency_penalty=0.0,
                        presence_penalty=0.6,
                        stop=['You:']
                    )
                    if search_subscription_availability(message.from_user.id) == 0:
                        update_token(message.from_user.id, len(message.text))
                    await message.answer(response['choices'][0]['text'])
                    LOST_MESSAGE = response["choices"][0]["text"]
                    return
                except Exception:
                    await message.answer('<b>‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>, –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–≤—ã—à–∞–µ—Ç'
                                         ' –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã', parse_mode="HTML")
                    return
        try:
            file = await bot.get_file(file_id)
            file_path = file.file_path
            file_on_disk = Path("", f"{file_id}.wav")
            await bot.download_file(file_path, destination=f'{file_id}.wav')
            audio_clip_paths = ['123.wav', f'{file_id}.wav']
            clips = [AudioFileClip(c) for c in audio_clip_paths]
            final_clip = concatenate_audioclips(clips)
            final_clip.write_audiofile(f'tmp{file_id}.wav')
            audio_file = open(f'tmp{file_id}.wav', "rb")
            transcript = openai.Audio.translate("whisper-1", audio_file)
            translator = Translator()
            audio_file.close()
            result = translator.translate(transcript["text"], src='en', dest='ru')
            response = openai.Completion.create(
                model='text-davinci-003', prompt=result.text, temperature=0.2, max_tokens=1000, top_p=1.0,
                frequency_penalty=0.0,
                presence_penalty=0.6,
                stop=['You:']
            )
            if search_subscription_availability(message.from_user.id) == 0:
                update_token(message.from_user.id, len(result.text))
            tts = gTTS(f'{response["choices"][0]["text"]}', lang='ru')
            tts.save(f'sound_ru{file_id}.mp3')
            tts_audio_file = open(f'sound_ru{file_id}.mp3', "rb")
            await bot.send_voice(message.from_user.id, tts_audio_file,
                                 reply_to_message_id=message.message_id)
            os.remove(file_on_disk)
            os.remove(f'tmp{file_id}.wav')
            os.remove(f'sound_ru{file_id}.mp3')

        except Exception:
            await message.answer("<b>‚ùó –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</b>. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ", parse_mode="HTML")
            if os.path.exists(file_on_disk):
                os.remove(file_on_disk)
            if os.path.exists(f'tmp{file_id}.wav'):
                os.remove(f'tmp{file_id}.wav')
            if os.path.exists(f'sound_ru{file_id}.mp3'):
                os.remove(f'sound_ru{file_id}.mp3')


if __name__ == '__main__':
    executor.start_polling(dp)
