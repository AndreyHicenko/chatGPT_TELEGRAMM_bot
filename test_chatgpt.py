from aiogram import Bot, Dispatcher, types

from config import TOKEN, TOKEN_YOOMONEY
import logging
import config
from aiogram.utils import executor
from pathlib import Path
import openai

import time
import sys
import os
from googletrans import Translator
from moviepy.editor import concatenate_audioclips, AudioFileClip
from gtts import gTTS
from aiogram.types.message import ContentType
from search_db import *
from yoomoney import Quickpay
from yoomoney import Client
import os.path
from keyboard.keyboard_pay import *
import random
import string

logging.basicConfig(level=logging.INFO)
OPENAI_API = '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'
openai.api_key = OPENAI_API
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
LOST_MESSAGE = ''
BUY_STATUS = 0
T = 0


@dp.callback_query_handler(text='top_up')
async def top_up(callback: types.callback_query):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", reply_markup=money_auth_menu)

@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    await message.answer("üîπ –¢–æ–∫–µ–Ω—ã –Ω—É–∂–Ω—ã —á—Ç–æ–±—ã –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç—É –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏.  \n \n"
                         "üîπ –û–Ω–∏ —Ç—Ä–∞—Ç—è—Ç—Å—è –≤ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ 6 —Ç–æ–∫–µ–Ω–æ–≤ ~ 1 —Å–∏–º–≤–æ–ª –ª—é–±–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞. \n \n"
                         "üîπ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å "
                         "–ø–æ–¥–ø–∏—Å–∫–∞ —Ç–æ —Ç–æ–∫–µ–Ω—ã –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã\n \n"
                         "üîπ –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –∫–æ–Ω—á–∏–ª–∏—á—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.", parse_mode="HTML")



# –¥–æ–¥–µ–ª–∞—Ç—å –æ–ø–ª–∞—Ç—É
@dp.callback_query_handler(text='100_rub')
async def pop_bol100_callback(callback: types.callback_query):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    latters_and_strings = string.ascii_lowercase + string.digits
    label = ''.join(random.sample(latters_and_strings, 10))
    quickpay = Quickpay(
        receiver="4100118147874677",
        quickpay_form="shop",
        targets="Sponsor this project",
        paymentType="SB",
        sum=100, label=label
    )
    update_label(label, callback.from_user.id)
    url = quickpay.redirected_url
    btn_popolnit100_balance = InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', callback_data='pop_bol100_menu', url=url)
    btn_check = InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='check_paymant')
    pop_bol100_menu = InlineKeyboardMarkup(row_width=1)
    pop_bol100_menu.insert(btn_popolnit100_balance)
    pop_bol100_menu.insert(btn_check)

    await bot.send_message(callback.from_user.id, "üíµ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É</b> 100‚ÇΩ"
                                                  "\n \n"
                                                  "üìå <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:</b>"
                                                  "\n \n"
                                                  "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç"
                                                  "\n"
                                                  "2. –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ"
                                                  "\n"
                                                  "3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´<b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É</b>¬ª"
                                                  "\n",
                           parse_mode="HTML",
                           reply_markup=pop_bol100_menu)

@dp.callback_query_handler(text='buy_subscription')
async def buy_subscription(callback: types.callback_query):
    if not upddate_datebase(callback.from_user.id, 1):
        await bot.send_message(callback.from_user.id, '‚ùå –ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç \n \n'
                                                      ' –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å¬ª',
                               reply_markup=top_up_menu_2)
    elif upddate_datebase(callback.from_user.id, 1):
        await bot.send_message(callback.from_user.id, upddate_datebase(callback.from_user.id, 1))

@dp.callback_query_handler(text='check_paymant')
async def check_pay(callback: types.callback_query):
    data = get_payment_status(callback.from_user.id)
    status = data[0][0]
    label = data[0][1]
    if status == 0:
        client = Client(TOKEN_YOOMONEY)
        history = client.operation_history(label=label)
        try:
            operation = history.operations[-1]
            if operation.status == 'success':
                await bot.delete_message(callback.from_user.id, callback.message.message_id)
                update_payment_status(callback.from_user.id)
                update_money(callback.from_user.id, 100)
                await bot.send_message(callback.from_user.id, '–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100‚ÇΩ')
                update_payment_status_false(callback.from_user.id)

        except Exception as e:
            await bot.send_message(callback.from_user.id, '‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!')
    else:
        await bot.delete_message(callback.from_user.id, callback.message.message_id)
        update_money(callback.from_user.id, 100)
        await bot.send_message(callback.from_user.id, '–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100‚ÇΩ')
        update_payment_status_false(callback.from_user.id)


@dp.message_handler(commands=['agreement'])
async def users_agreement(message: types.Message):
    await message.answer("‚ùó –í–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ <b>–∑–∞–ø—Ä–µ—à–∞–µ—Ç—Å—è</b> —Å–ø–∞–º–∏—Ç—å,"
                         " –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã, "
                         "–≤—ã—Ä–∞–∂–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º –Ω–∞—Ä–æ–¥–∞–º", parse_mode="HTML")


@dp.message_handler(commands=['profile'])
async def profile_start(message: types.Message):
    money = search_money(message.from_user.id)
    subscription = search_subscription_availability(message.from_user.id)
    if subscription == 0:
        subscription = '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'
    elif subscription == 1:
        subscription = '–ê–∫—Ç–∏–≤–Ω–∞'
    tokens_with_user = search_token(message.from_user.id)
    await message.answer("<b>üìì –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>"
                         "\n \n"
                         f"<b>üë§ –ò–º—è:</b> {message.from_user.first_name} {message.from_user.last_name} \n"
                         f"<b>üîë –¢–æ–∫–µ–Ω–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å:</b> {tokens_with_user}\n"
                         f"<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {money}‚ÇΩ\n"
                         f"<b>üíé –ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription}\n"
                         "\n"
                         "‚ùì –ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ —Ç–æ–∫–µ–Ω—ã /help", parse_mode="HTML", reply_markup=top_up_menu)


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b> –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í—Å–µ–º–æ–≥—É—â–∏–π-–ë–æ—Ç. –Ø –º–æ–≥—É"
                         " –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å. –í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–º —Ç–∞–∫ –∏"
                         " –≥–æ–ª–æ—Å–æ–º. –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ. "
                         "–ù–∞–¥–µ—é—Å—å —è –ø–æ–º–æ–≥—É –≤–∞–º! <b>–í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ."
                         " –î–∞–ª–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"
                         " –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É</b>"
                         " –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ /profile."
                         "–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º <b>–ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ"
                         " /agreement", parse_mode="HTML")
    if search_user_with_db(message.from_user.id):
        pass
    elif not search_user_with_db(message.from_user.id):
        add_new_user(message.from_user.id)


# –¥–ª—è –≥–æ–ª–æ—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
@dp.message_handler(content_types=[
    types.ContentType.VOICE,
    types.ContentType.AUDIO,
    types.ContentType.DOCUMENT
]
)
@dp.message_handler()
async def send_message(message: types.Message):
    global LOST_MESSAGE, BUY_STATUS, T
    if datetime.datetime.strptime(str(datetime.datetime.now().date()), '%Y-%m-%d')\
            > datetime.datetime.strptime(date_check(message.from_user.id)[0][0], '%Y-%m-%d'):
        await message.answer('‚ùó –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–∫–æ–Ω—á–µ–Ω–æ')
        update_subscription_availability_false(message.from_user.id)
    if search_token(message.from_user.id) == 0 and search_subscription_availability(message.from_user.id) == 0:
        await message.answer("‚ùó <b>–ö–æ–ª–∏—á–∏—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω–æ</b>, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
                             " –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ <b>–ø—Ä–µ–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É</b> –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É "
                             "/profile", parse_mode="HTML")
    # if not serch_user(message.from_user.id):
    #     await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É")
    elif int(search_token(message.from_user.id)) > 0 or search_subscription_availability(message.from_user.id) == 1:
        if message.content_type == types.ContentType.VOICE:
            file_id = message.voice.file_id
        elif message.content_type == types.ContentType.AUDIO:
            file_id = message.audio.file_id
        elif message.content_type == types.ContentType.DOCUMENT:
            file_id = message.document.file_id
        elif T == 1:
            pass
        else:

            try:
                x = ['‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 14 —Å–µ–∫']
                if message.text not in x:
                    if message.text[-1] not in string.punctuation:
                        message.text = message.text + '.'
                    response = openai.Completion.create(
                        model='text-davinci-003', prompt=message.text, temperature=0.2, max_tokens=4000, top_p=1.0,
                        frequency_penalty=0.0,
                        presence_penalty=0.6,
                        stop=['You:']
                    )
                    if search_subscription_availability(message.from_user.id) == 0:
                        update_token(message.from_user.id, len(message.text))
                    await message.answer(response['choices'][0]['text'])
                    LOST_MESSAGE = response["choices"][0]["text"]
                    # —Ç–∞–π–º–µ—Ä –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    T = 1
                    time.sleep(1)
                    msg = await message.answer('‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 14 —Å–µ–∫')
                    time.sleep(1)
                    await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 13 —Å–µ–∫")
                    time.sleep(1)
                    await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 12 —Å–µ–∫")
                    time.sleep(1)
                    await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 11 —Å–µ–∫")
                    time.sleep(1)
                    await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 10 —Å–µ–∫")
                    time.sleep(1)
                    await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 9 —Å–µ–∫")
                    time.sleep(1)
                    await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 8 —Å–µ–∫")
                    time.sleep(1)
                    await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 7 —Å–µ–∫")
                    time.sleep(1)
                    await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 6 —Å–µ–∫")
                    time.sleep(1)
                    await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 5 —Å–µ–∫")
                    time.sleep(1)
                    await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 4 —Å–µ–∫")
                    time.sleep(1)
                    await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 3 —Å–µ–∫")
                    time.sleep(1)
                    await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 2 —Å–µ–∫")
                    time.sleep(1)
                    await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 1 —Å–µ–∫")
                    time.sleep(1)
                    await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 0 —Å–µ–∫")
                    time.sleep(1)
                    await msg.edit_text(f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    T = 0
                    return

            except Exception:
                await message.answer('<b>‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>, –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–≤—ã—à–∞–µ—Ç'
                                     ' –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã', parse_mode="HTML")
                return
        try:
            if T == 1:
                pass
            elif T == 0:
                file = await bot.get_file(file_id)
                file_path = file.file_path
                file_on_disk = Path("", f"{file_id}.wav")
                await bot.download_file(file_path, destination=f'{file_id}.wav')
                audio_clip_paths = ['123.wav', f'{file_id}.wav']
                clips = [AudioFileClip(c) for c in audio_clip_paths]
                final_clip = concatenate_audioclips(clips)
                final_clip.write_audiofile(f'tmp{file_id}.wav')
                audio_file = open(f'tmp{file_id}.wav', "rb")
                transcript = openai.Audio.translate("whisper-1", audio_file)
                translator = Translator()
                audio_file.close()
                result = translator.translate(transcript["text"], src='en', dest='ru')
                response = openai.Completion.create(
                    model='text-davinci-003', prompt=result.text, temperature=0.2, max_tokens=1000, top_p=1.0,
                    frequency_penalty=0.0,
                    presence_penalty=0.6,
                    stop=['You:']
                )
                if search_subscription_availability(message.from_user.id) == 0:
                    update_token(message.from_user.id, len(result.text))
                tts = gTTS(f'{response["choices"][0]["text"]}', lang='ru')
                tts.save(f'sound_ru{file_id}.mp3')
                tts_audio_file = open(f'sound_ru{file_id}.mp3', "rb")
                await bot.send_voice(message.from_user.id, tts_audio_file,
                                     reply_to_message_id=message.message_id)
                os.remove(file_on_disk)
                os.remove(f'tmp{file_id}.wav')
                os.remove(f'sound_ru{file_id}.mp3')

        except Exception:
            await message.answer("<b>‚ùó –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</b>. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ", parse_mode="HTML")
            if os.path.exists(file_on_disk):
                os.remove(file_on_disk)
            if os.path.exists(f'tmp{file_id}.wav'):
                os.remove(f'tmp{file_id}.wav')
                audio_file.close()
            if os.path.exists(f'sound_ru{file_id}.mp3'):
                os.remove(f'sound_ru{file_id}.mp3')
                # —Ç–∞–π–º–µ—Ä –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            T = 1
            time.sleep(1)
            msg = await message.answer('‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 14 —Å–µ–∫')
            time.sleep(1)
            await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 13 —Å–µ–∫")
            time.sleep(1)
            await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 12 —Å–µ–∫")
            time.sleep(1)
            await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 11 —Å–µ–∫")
            time.sleep(1)
            await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 10 —Å–µ–∫")
            time.sleep(1)
            await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 9 —Å–µ–∫")
            time.sleep(1)
            await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 8 —Å–µ–∫")
            time.sleep(1)
            await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 7 —Å–µ–∫")
            time.sleep(1)
            await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 6 —Å–µ–∫")
            time.sleep(1)
            await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 5 —Å–µ–∫")
            time.sleep(1)
            await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 4 —Å–µ–∫")
            time.sleep(1)
            await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 3 —Å–µ–∫")
            time.sleep(1)
            await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 2 —Å–µ–∫")
            time.sleep(1)
            await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 1 —Å–µ–∫")
            time.sleep(1)
            await msg.edit_text(f"‚è≥ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–π—Ç–µ 0 —Å–µ–∫")
            time.sleep(1)
            await msg.edit_text(f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            T = 0


if __name__ == '__main__':
    executor.start_polling(dp)
